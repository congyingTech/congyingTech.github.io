<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MohnTech</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-29T11:31:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mohn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5月份计划</title>
    <link href="http://yoursite.com/2016/05/03/plan/5%E6%9C%88%E4%BB%BD%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2016/05/03/plan/5月份计划/</id>
    <published>2016-05-03T15:43:59.217Z</published>
    <updated>2016-04-29T11:31:33.000Z</updated>
    
    <content type="html">&lt;p&gt;学习计划:&lt;br&gt;1.leetcode上的easy和medium难度的题目一定要刷完了!!!&lt;br&gt;2.开始准备雅思考试啦,每天背雅思单词,一定坚持下来!!! 每天可以看一下英语视频.&lt;br&gt;3.Python和java的基本知识要完善,基本的数据结构要过一遍.(java看java编程思想,python工作中完善)&lt;br&gt;4.这个月每天晚上看1-2节的机器学习,白天补充一下统计学的知识.一定把台大的那门课给看完!!!  &lt;/p&gt;
&lt;p&gt;阅读计划:&lt;br&gt;1.技术类:统计学基础电子版&lt;br&gt;2.小说类:百年孤独  &lt;/p&gt;
&lt;p&gt;娱乐计划:&lt;br&gt;1.单反上的照片的归纳整理,打印出来几张好的照片,在网上做成明信片.&lt;br&gt;2.有时间的话把欢乐颂追完,没时间的话再说吧&lt;br&gt;3.约小伙伴出来次饭.  &lt;/p&gt;
&lt;p&gt;财务计划:&lt;br&gt;不能再拖啦 把存折上的钱转到银行卡!!!再整到支付宝上!!!!  &lt;/p&gt;
&lt;p&gt;刚巴爹!!!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学习计划:&lt;br&gt;1.leetcode上的easy和medium难度的题目一定要刷完了!!!&lt;br&gt;2.开始准备雅思考试啦,每天背雅思单词,一定坚持下来!!! 每天可以看一下英语视频.&lt;br&gt;3.Python和java的基本知识要完善,基本的数据结构要过一遍.(java看j
    
    </summary>
    
      <category term="计划" scheme="http://yoursite.com/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="plan" scheme="http://yoursite.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:290--Word Pattern</title>
    <link href="http://yoursite.com/2016/05/03/leetcode/word-pattern/"/>
    <id>http://yoursite.com/2016/05/03/leetcode/word-pattern/</id>
    <published>2016-05-03T11:59:59.000Z</published>
    <updated>2016-05-03T15:58:41.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：&lt;br&gt;给定一个简单的模式pattern,判断给定的str是否与pattern符合.&lt;br&gt;Given a pattern and a string str, find if str follows the same pattern.  &lt;/p&gt;
&lt;p&gt;Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.  &lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;pattern = “abba”, str = “dog cat cat dog” should return true.&lt;br&gt;pattern = “abba”, str = “dog cat cat fish” should return false.&lt;br&gt;pattern = “aaaa”, str = “dog cat cat dog” should return false.&lt;br&gt;pattern = “abba”, str = “dog dog dog dog” should return false.  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;My way:&lt;br&gt;1)利用dict可以value-key的方法,进行匹配判断&lt;br&gt;2)在lookup中没有重复的元素,如果有重复的元素用set过滤掉后,比较length,如果一样则是true,否则为false   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#-*-coding:utf-8 -*-  
class Solution(object):
    def wordPattern(self, pattern, str):
        pattern_list = list(pattern)
        str_list = str.split(&amp;quot; &amp;quot;)
        if len(pattern_list) != len(str_list):
            return False
        lookup = dict()
        for i in range(len(pattern_list)):
            #如果i下标指向的元素没有在lookup里面，就add一下
            if pattern_list[i] not in lookup:
                lookup[pattern_list[i]] = str_list[i]
            #如果i下标指向的元素在lookup里面，就判断，key值对应的value是否与str_list的元素相同
            else:
                if str_list[i] != lookup[pattern_list[i]]:
                    return False
        #test lookup: print(lookup)
        key_set = set()
        value_set = set()
        for key,value in lookup.items():
            key_set.add(key) 
            value_set.add(value)


        #test: print(key_set)
        #test: print(value_set)
        if len(key_set) != len(value_set):
            return False

        return True

if __name__ == &amp;quot;__main__&amp;quot;:
    print(Solution().wordPattern(&amp;quot;abba&amp;quot;, &amp;quot;cat cat cat cat&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem&quot;&gt;&lt;/a&gt;My Problem&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kamyu104/LeetCode/blob/master/Python/word-pattern.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考答案1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;从这一题终于感觉到自己有进步了,不容易啊!!!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：&lt;br&gt;给定一个简单的模式pattern,判断给定的str是否与pattern符合.&lt;br&gt;Given a pattern and a string str, find if str follows the same pattern.  &lt;/p&gt;
&lt;p&gt;Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.  &lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;pattern = “abba”, str = “dog cat cat dog” should return true.&lt;br&gt;pattern = “abba”, str = “dog cat cat fish” should return false.&lt;br&gt;pattern = “aaaa”, str = “dog cat cat dog” should return false.&lt;br&gt;pattern = “abba”, str = “dog dog dog dog” should return false.  &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="dict" scheme="http://yoursite.com/tags/dict/"/>
    
      <category term="set" scheme="http://yoursite.com/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:190--Reverse Bits</title>
    <link href="http://yoursite.com/2016/05/03/leetcode/reverse-bits/"/>
    <id>http://yoursite.com/2016/05/03/leetcode/reverse-bits/</id>
    <published>2016-05-03T11:59:59.000Z</published>
    <updated>2016-05-03T08:00:16.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：十进制转换为二进制，32位二进制数进行逆置，得到的二进制再转换为十进制。&lt;br&gt;eg:8=&amp;gt;0000000000000000000….001000=&amp;gt;0001…..00000000000=&amp;gt;268435456&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;我的想法：1)进制的相互转换：十进制&amp;lt;=&amp;gt;二进制  2）类型的相互转换：string&amp;lt;=&amp;gt;list 十进制转换为二进制之后进行逆置操作，然后再转换为十进制。&lt;br&gt;显然这种方法是最笨的方法了，用二进制位操作是简单的方法，我咋又忘了呢？！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#-*- coding:utf-8 -*-
#1)进制的相互转换：十进制&amp;lt;=&amp;gt;二进制
#2）类型的相互转换：string&amp;lt;=&amp;gt;list
class Solution(object):
    def reverseBits(self, n):
        #十进制转换为二进制
        string = bin(n)
        length = len(string)
        real_string = string[2:length]
        real_len = length - 2
        strlist = list(real_string)
        #初始化list
        new_strlist = [&amp;apos;0&amp;apos;] * 32
        #reverse strlist
        for i in range(real_len):
            new_strlist[i] = strlist[real_len - i - 1]
        #list to str
        reverse_str = &amp;quot;&amp;quot;.join(new_strlist)
        #二进制转换为十进制
        result = int(reverse_str, 2)
        return result

if __name__ == &amp;quot;__main__&amp;quot;:
    print(Solution().reverseBits(8))  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二进制位操作解法：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        result = 0
        for i in xrange(32):
            result &amp;lt;&amp;lt;= 1
            result |= n &amp;amp; 1
            n &amp;gt;&amp;gt;= 1
        return result

if __name__ == &amp;apos;__main__&amp;apos;:
  print Solution().reverseBits(1)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem&quot;&gt;&lt;/a&gt;My Problem&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_4b5039210100gkst.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二进制位操作&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;result位操作左移1位相当于乘以2的一次幂&lt;br&gt;n右移一位相当于除以2的一次幂。&lt;br&gt;这样实现逆置???不是很理解~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：十进制转换为二进制，32位二进制数进行逆置，得到的二进制再转换为十进制。&lt;br&gt;eg:8=&amp;gt;0000000000000000000….001000=&amp;gt;0001…..00000000000=&amp;gt;268435456&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="Python进制转换" scheme="http://yoursite.com/tags/Python%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="二进制位操作" scheme="http://yoursite.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:58--Length of Last Word</title>
    <link href="http://yoursite.com/2016/05/03/leetcode/length-of-last-word/"/>
    <id>http://yoursite.com/2016/05/03/leetcode/length-of-last-word/</id>
    <published>2016-05-03T11:59:59.000Z</published>
    <updated>2016-05-03T15:41:32.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.&lt;/p&gt;
&lt;p&gt;If the last word does not exist, return 0.&lt;/p&gt;
&lt;p&gt;Note: A word is defined as a character sequence consists of non-space characters only.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;1）Given s = “Hello World”,return 5.&lt;br&gt;2）Given s = “a   “,return 1&lt;br&gt;3）Given s = “”,return 0 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;这道题只要能想到用Python中对应的函数，就非常快的能够解决，strip([chars])函数，官方解释是：Return a copy of the string with the leading and trailing characters removed.删除头和尾的字串。在这里正好可以满足像&lt;code&gt;“a   “&lt;/code&gt;这样的字串空格的过滤。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#-*-coding:utf-8-*-
class Solution(object):
    def lengthOfLastWord(self, s):
       #这里用到strip(rm)函数，strip可以删除s开头和结尾的rm，若为空，默认删除开头和结尾的空白字符
       return len(s.strip().split(&amp;quot; &amp;quot;)[-1])
if __name__ == &amp;quot;__main__&amp;quot;:

    print(Solution().lengthOfLastWord(&amp;quot;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem&quot;&gt;&lt;/a&gt;My Problem&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.strip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python 中 strip()函数 官方解释&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/kaituorensheng/archive/2013/05/23/3096028.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;strip()中文解释应用&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.&lt;/p&gt;
&lt;p&gt;If the last word does not exist, return 0.&lt;/p&gt;
&lt;p&gt;Note: A word is defined as a character sequence consists of non-space characters only.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;1）Given s = “Hello World”,return 5.&lt;br&gt;2）Given s = “a   “,return 1&lt;br&gt;3）Given s = “”,return 0 &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="strip()函数" scheme="http://yoursite.com/tags/strip-%E5%87%BD%E6%95%B0/"/>
    
      <category term="list" scheme="http://yoursite.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:20--Valid Parentheses</title>
    <link href="http://yoursite.com/2016/05/03/leetcode/valid-parentheses/"/>
    <id>http://yoursite.com/2016/05/03/leetcode/valid-parentheses/</id>
    <published>2016-05-03T11:59:59.000Z</published>
    <updated>2016-05-03T07:18:04.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：括号的匹配&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;用dict，每一个括号相互匹配，进出栈的问题。判断括号匹配的合法性。使用一个栈来解决问题。遇到左括号入栈，遇到右括号，检查栈顶的左括号是否匹配，如果匹配，弹栈，如果不匹配，返回错误。如果栈为空，而遇到右括号，同样返回错误。遍历完后，栈如果不空，同样返回错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#-*- coding:utf-8 -*-

#是否是有效括号的判断：
#The brackets must close in the correct order, &amp;quot;()&amp;quot; and &amp;quot;()[]{}&amp;quot; are all valid but &amp;quot;(]&amp;quot; and &amp;quot;([)]&amp;quot; are not
#首先，想到的是每一对括号都要是分拆后都要是偶数个。其次每次出现都要按照一定的次序成对出现。

#算法思想：用dict，每一个括号相互匹配，进出栈的问题。
class Solution(object):
    def isValid(self, s):
        #list的初始化， stack = []
        stack, lookup = [], {&amp;quot;(&amp;quot;: &amp;quot;)&amp;quot;, &amp;quot;{&amp;quot;: &amp;quot;}&amp;quot;, &amp;quot;[&amp;quot;: &amp;quot;]&amp;quot;}
        for parenthese in s:
            if parenthese in lookup:
                stack.append(parenthese)

            #1)stack 的 len为0的时候，说明这个字串中并不是括号，所以return False
            #2)stack里面存的是左括号，出栈的时候（左括号出栈），dict[key] = value 推知，lookup[stack.pop()]得到右括号
            elif len(stack) == 0 or lookup[stack.pop()] != parenthese:
                return False
        #当stack都能够pop完，len为0的时候说明是正确的。
        return len(stack) == 0


if __name__ == &amp;quot;__main__&amp;quot;:
    print(Solution().isValid(&amp;quot;([{]})&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另一种解决代码：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def isValid(self, s):
        stack = []
        for i in range(len(s)):
            if s[i] == &amp;apos;(&amp;apos; or s[i] == &amp;apos;[&amp;apos; or s[i] == &amp;apos;{&amp;apos;:
                stack.append(s[i])
            if s[i] == &amp;apos;)&amp;apos;:
                if stack == [] or stack.pop() != &amp;apos;(&amp;apos;:
                    return False
            if s[i] == &amp;apos;]&amp;apos;:
                if stack == [] or stack.pop() != &amp;apos;[&amp;apos;:
                    return False
            if s[i] == &amp;apos;}&amp;apos;:
                if stack == [] or stack.pop() != &amp;apos;{&amp;apos;:
                    return False
        if stack:
            return False
        else:
            return True
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem&quot;&gt;&lt;/a&gt;My Problem&lt;/h3&gt;&lt;p&gt;不太明白pop的时候的原理，lookup[stack.pop()] != parenthese 这个的parenthese是右括号吗？为什么是右括号？&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;待解决！！！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：括号的匹配&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="dict" scheme="http://yoursite.com/tags/dict/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:141--Linked List Cycle</title>
    <link href="http://yoursite.com/2016/05/02/leetcode/linked-list-cycle/"/>
    <id>http://yoursite.com/2016/05/02/leetcode/linked-list-cycle/</id>
    <published>2016-05-02T11:59:59.000Z</published>
    <updated>2016-05-03T15:40:29.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述:Given a linked list, determine if it has a cycle in it.&lt;br&gt;Follow up:Can you solve it without using extra space?&lt;br&gt;该题目意思是判断这个linkedlist是不是有环的.并且最好不要浪费多余的空间.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;1)第一种算法是快慢指针的方法,快指针每次前进两个,慢指针每次前进一个,如果快指针追上了慢指针,则说明是有环的,否则是没有环的.&lt;br&gt;2)第二种方法又用到了神奇的set,用set记录访问过的结点,(注意这里是记录结点,而不是结点值!!!),如果某结点被访问了第二次,则说明有环.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#-*- coding:utf-8 -*-
#两种解法:1)快慢指针 2)利用python中的set

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
         self.val = x
         self.next = None

class Solution(object):
    def hasCycle(self, head):
       #定义快指针和慢指针
       fast, slow = head, head
       while fast and fast.next:
           fast, slow = fast.next.next, slow.next
           if fast is slow:
               return True
       return False
#2)set的方法
class Solution2(object):
    def hasCycle(self, head):
        nodeset = set()
        p = head
        while p:
            if p in nodeset:
                return True
            nodeset.add(p)
            p = p.next
        return False

if __name__ == &amp;quot;__main__&amp;quot;:
    head = ListNode(1)
    head.next = ListNode(2)
    head.next.next = ListNode(3)
    head.next.next.next = head.next
    print Solution2().hasCycle(head)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述:Given a linked list, determine if it has a cycle in it.&lt;br&gt;Follow up:Can you solve it without using extra space?&lt;br&gt;该题目意思是判断这个linkedlist是不是有环的.并且最好不要浪费多余的空间.&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:342--Power of Four</title>
    <link href="http://yoursite.com/2016/04/29/leetcode/power-of-four/"/>
    <id>http://yoursite.com/2016/04/29/leetcode/power-of-four/</id>
    <published>2016-04-29T11:59:59.000Z</published>
    <updated>2016-04-29T11:30:41.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：判断一个数是不是4的次方，比如16是的，8不是的，5不是的&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;判断是否是4的次方，可以考虑用二进制的方法，16的二进制数是10000，8的二进制数是1000，5的二进制数是101，由此可见，若是4^n则需要满足：&lt;br&gt;1）最高位为1,其他位均为0&lt;br&gt;2) 位数为奇数位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding:utf-8 -*-
#满足两个条件：1）二进制数的高位为1，其余为为0，； 2）二进制的位数为奇数
    import re
    from posixpath import realpath
    class Solution(object):
        def isPowerOfFour(self, num):
            &amp;quot;&amp;quot;&amp;quot;
            :type num: int
            :rtype: bool
            &amp;quot;&amp;quot;&amp;quot;
                #先将十进制转换为二进制
                string = bin(num)
                #二进制数的长度
                length = len(string)
                #真正的字符串
                real_string = string[2:length]
                #真正的长度
                real_len = length - 2
                #string to list
                strlist = list(real_string)
                #最高位的数字
                gw = strlist[0]
                count = 0
                for e in strlist:
                    if gw != &amp;apos;1&amp;apos;:
                        return False
                    elif e == &amp;apos;0&amp;apos;:
                       count += 1

                if count == real_len - 1 and count % 2 == 0:
                    return True
                else:
                    return False     

        if __name__ == &amp;quot;__main__&amp;quot;:
            num = 16
            print(Solution().isPowerOfFour(num))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem&quot;&gt;&lt;/a&gt;My Problem&lt;/h3&gt;&lt;p&gt;涉及的问题：&lt;br&gt;1）&lt;a href=&quot;http://www.cnblogs.com/moinmoin/archive/2011/02/28/bin_oct_int_hex.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python的进制转换&lt;/a&gt;&lt;br&gt;2） 截取字符串&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;NO&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：判断一个数是不是4的次方，比如16是的，8不是的，5不是的&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="Python进制转换" scheme="http://yoursite.com/tags/Python%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:345--Reverse Vowels of a String</title>
    <link href="http://yoursite.com/2016/04/29/leetcode/reverse-vowels-of-a-string/"/>
    <id>http://yoursite.com/2016/04/29/leetcode/reverse-vowels-of-a-string/</id>
    <published>2016-04-29T11:59:59.000Z</published>
    <updated>2016-04-29T11:25:46.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：元音字母的位置reverse，leecode—&amp;gt;leocede; hello—&amp;gt;holle&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;双指针的方法，设置左右两个指针，左指针向右移动，右指针向左移动，直到两个指针相遇，就break,如果没有相遇，就寻找元音元素在tuple（a, e, i, o, u）中。如果有的话，就交换位置，如果没有就left++,right–直到有元音因素，进行交换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    #这里使用双指针的方法
    def reverseVowels(self,s):
        VOWELS = (&amp;apos;a&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;i&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;u&amp;apos;)
        size = len(s)
        left, right = 0, size - 1
        #将string转换为list
        ls = list(s)
        while True:
            while left &amp;lt; size and s[left].lower() not in VOWELS:
                left += 1
            while right &amp;gt;= 0 and s[right].lower() not in VOWELS:
                right -= 1
            if left &amp;gt;= right: break
            ls[left], ls[right] = ls[right], ls[left]
            left, right = left + 1, right - 1
        #list to string 
        return &amp;apos;&amp;apos;.join(ls)


if __name__ == &amp;quot;__main__&amp;quot;:
    s = &amp;quot;leetcode&amp;quot;
       print(Solution().reverseVowels(s))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注释一下：Python lower() 方法转换字符串中所有大写字符为小写。    &lt;/p&gt;
&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem&quot;&gt;&lt;/a&gt;My Problem&lt;/h3&gt;&lt;p&gt;参考了书影博客，知道了一种更加简单的方法，用正则表达式表示：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def reverseVowels(self, s):
      vowels = re.findall(&amp;apos;(?i)[aeiou]&amp;apos;, s)
    return re.sub(&amp;apos;(?i)[aeiou]&amp;apos;, lambda m: vowels.pop(), s)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(?i)[…]在正则表达式中的意思是忽略大小写对[]中的内容进行匹配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;re.sub(repl, string[, count]) 或者 re.sub(pattern, repl, string[, count])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;匿名函数lambda的使用：当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。&lt;br&gt;格式是lambda x: f(x)  &lt;/p&gt;
&lt;p&gt; 这段代码的解释： vowels中存储着s中所有的元音元素，正则匹配中的sub方法替换vowels中pop出来的元素。   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下一篇转载一篇好的讲正则表达式的博文。&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python正则表达式指南&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：元音字母的位置reverse，leecode—&amp;gt;leocede; hello—&amp;gt;holle&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:344--Reverse String</title>
    <link href="http://yoursite.com/2016/04/28/leetcode/reverse-string/"/>
    <id>http://yoursite.com/2016/04/28/leetcode/reverse-string/</id>
    <published>2016-04-28T11:59:59.000Z</published>
    <updated>2016-04-29T11:02:28.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：&lt;br&gt;翻转字符串,将hello变为olleh&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;我的想法是将string类型的字符串首先变为list,然后对list进行操作,最后再将list转换为string&lt;br&gt;(1)string to list:list(s)&lt;br&gt;(2)for循环进行list的翻转,其中i进行index的控制&lt;br&gt;(3)list to string:””.join(list)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def reverseString(self, s):
        lengthOfs = len(s)
        #list类型转换可以将string类型转换为list
        stringL = list(s)
        i = 0
        news = [None] * lengthOfs
        for e in stringL:
            news[lengthOfs - i - 1] = e
            i = i + 1
        #&amp;quot;&amp;quot;.join的方法可以将list转换为string
        return &amp;quot;&amp;quot;.join(news)
if __name__ == &amp;quot;__main__&amp;quot;:
     s = &amp;quot;hello&amp;quot;
     print Solution().reverseString(s)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;在python中对字符串的操作还是不太熟练,可能因为度假的时间太久了=.=  &lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/huangcong/archive/2011/08/29/2158268.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字符串的基本操作&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：&lt;br&gt;翻转字符串,将hello变为olleh&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="字符串操作" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Dell Remote Access Controller 5老旧的driver的ilo的处理</title>
    <link href="http://yoursite.com/2016/04/14/vmware/dell-old-driver-solution/"/>
    <id>http://yoursite.com/2016/04/14/vmware/dell-old-driver-solution/</id>
    <published>2016-04-14T11:59:59.000Z</published>
    <updated>2016-04-14T13:46:19.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;Sin2-pekcpd045是一个非常老的driver，  Dell Remote Access Controller 5 ，废话不多说，直接开始讲一路上的艰辛。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;显示遇到了Error when reading from SSL socket connection：SSLsocket问题&lt;br&gt;经过各种Google，在dell的技术支持论坛上，找到了solution：&lt;br&gt;换java的版本，奇葩吧，就是这么奇葩，换成了jre-8u25-windows-x64后就可以正常的打开了。&lt;br&gt;2．PR1067023&lt;br&gt;&lt;img src=&quot;http://7xskaf.com1.z0.glb.clouddn.com/error.png&quot; alt=&quot;error&quot;&gt;&lt;br&gt;3.要去掉media中的session(dell中的media挂载虚拟镜像的时候只能挂载一个)&lt;br&gt;&lt;img src=&quot;http://7xskaf.com1.z0.glb.clouddn.com/dell.png&quot; alt=&quot;dell&quot;&gt;&lt;br&gt;下面是处理问题3的步骤:&lt;br&gt;This site requires JavaScript to be enabled&lt;br&gt;Also I upgraded the privileges on the “vmware” account on the ILO/DRAC. If there is an existing Virtual Media session running that needs to be stop, you can manually kill it. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Here are the steps: &lt;/strong&gt;&lt;br&gt;1.) SSH into (drivername)-ilo&lt;br&gt;2.) credentials: vmware/######&lt;br&gt;3.) run the command “racadm racreset”  &lt;/p&gt;
&lt;p&gt;Running racadm racreset will kill all sessions connecting to esx170-ilo. Give it 2 minutes to reboot and you can log back into the ILO via HTTP/HTTPS/SSH.. etc.&lt;br&gt;If your desktop continues to have problems mounting the ISO, let me know and I can re-route this ticket to the desktop team in your region.&lt;br&gt;If there is an existing Virtual Media session running that needs to be stop, you can manually kill it.  &lt;/p&gt;
&lt;p&gt;4.然而今天经过了一天的尝试,还是出现2所示的error,各种厚脸皮的询问下,得到如下解法:&lt;br&gt;在重启的时候,F12进入boot menu,选择从本地启动,然后,下拉第二个选项,就可以正确的打开ilo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在此特别感谢chengcheng姐不厌其烦的帮助,还有璐璐姐的帮助.^_^&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;Sin2-pekcpd045是一个非常老的driver，  Dell Remote Access Controller 5 ，废话不多说，直接开始讲一路上的艰辛。&lt;/p&gt;
    
    </summary>
    
      <category term="driver" scheme="http://yoursite.com/categories/driver/"/>
    
    
      <category term="driver" scheme="http://yoursite.com/tags/driver/"/>
    
      <category term="ilo" scheme="http://yoursite.com/tags/ilo/"/>
    
  </entry>
  
  <entry>
    <title>Pyhton I/O进行文件读写</title>
    <link href="http://yoursite.com/2016/04/14/vmware/python%20IO/"/>
    <id>http://yoursite.com/2016/04/14/vmware/python IO/</id>
    <published>2016-04-14T11:59:59.000Z</published>
    <updated>2016-04-14T14:27:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;&lt;p&gt;自从成为小杂碎之后,各种修改bug,这次要求的是check IODM的value值, check的是一个文件里面enabled和enableSSLv3的值, 刚开始我写了一个shell script,但是被各种批评,对于文件的操作python更有优势,其实我并不能苟同这样的观点,但是经过今天写了这段python的代码,发现python能用较少的代码实现,而且,可以避免调用shell脚本,这个过程更加easy一点.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Python-I-O操作&quot;&gt;&lt;a href=&quot;#Python-I-O操作&quot; class=&quot;headerlink&quot; title=&quot;Python I/O操作:&quot;&gt;&lt;/a&gt;Python I/O操作:&lt;/h2&gt;&lt;p&gt;下面这段代码里面用的是正则表达式中的search和sub的方法,进行字符串匹配和替换.&lt;br&gt;基本思想是每读取一行文件,看是否值是正确的,如果不正确,就进行替换并且将这一行line加入到字符串w_str中,如果正确,则直接将此行加入到字符串w_str中.&lt;br&gt;这种方式,更方便的达到查找和替换的目的!!!&lt;br&gt;基本的格式:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filename = &amp;quot;&amp;quot; 
fread = open(filename, &amp;apos;r&amp;apos;)
fwrite = open(filename, &amp;apos;w&amp;apos;)
w_str = &amp;quot;&amp;quot;
for line in fread:
    #将line加入到文件中
    fwrite.write(line)
fread.close()
fwrite.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;============================================================&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; #-*- coding:utf-8 -*-

import re

filedir = &amp;quot;/Users/congyingw/Desktop/sfcb.cfg&amp;quot;
f1 = open(filedir, &amp;apos;r&amp;apos;)
w_str = &amp;quot;&amp;quot;
flag = 0
for line in f1:
    #check has enableSSLv3 or not
    if re.search(&amp;quot;enableSSLv3&amp;quot;, line):
       flag = 0
    else:
       flag = 1
    #check enabled and enableSSLv3 value
    if re.search(&amp;quot;enabled:true&amp;quot;, line) and re.search(&amp;quot;enableSSLv3:true&amp;quot;, line):
        w_str += line 
        print(&amp;quot;right value&amp;quot;)
    elif re.search(&amp;quot;enabled:false&amp;quot;, line):
        line = re.sub(&amp;quot;enabled:false&amp;quot;, &amp;quot;enabled:true&amp;quot;, line)
        w_str += line
    else :
        line = re.sub(&amp;quot;enableSSLv3:false&amp;quot;, &amp;quot;enableSSLv3:true&amp;quot;, line)
        w_str += line
if flag == 1:
     w_str += &amp;quot;\nenableSSLv3:true&amp;quot;
print(w_str)
f2=open(filedir, &amp;apos;w&amp;apos;)
f2.write(w_str)
f1.close()
f2.close()
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;&lt;p&gt;自从成为小杂碎之后,各种修改bug,这次要求的是check IODM的value值, check的是一个文件里面enabled和enableSSLv3的值, 刚开始我写了一个shell script,但是被各种批评,对于文件的操作python更有优势,其实我并不能苟同这样的观点,但是经过今天写了这段python的代码,发现python能用较少的代码实现,而且,可以避免调用shell脚本,这个过程更加easy一点.&lt;br&gt;
    
    </summary>
    
      <category term="实习生" scheme="http://yoursite.com/categories/%E5%AE%9E%E4%B9%A0%E7%94%9F/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E5%AE%9E%E4%B9%A0%E7%94%9F/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="I/O" scheme="http://yoursite.com/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下java安装以及配置更改(持续更新)</title>
    <link href="http://yoursite.com/2016/04/14/linux/Ubuntu%E4%B8%8B%E7%9A%84java%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/04/14/linux/Ubuntu下的java配置/</id>
    <published>2016-04-14T11:40:59.000Z</published>
    <updated>2016-04-14T11:42:59.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;近些时间搞机子的时候，总是因为windows下环境不对，导致无法正常的upgrade系统，所以借着在VMware实习，有免费专业的VMware Workstation Pro 供我使用，^_^, 嘿嘿，所以建了一个Ubuntu的虚拟机，准备在里面配置环境，以后再upgrade build就可以不用借别人的rdc啦~开森。  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;java的安装：&quot;&gt;&lt;a href=&quot;#java的安装：&quot; class=&quot;headerlink&quot; title=&quot;java的安装：&quot;&gt;&lt;/a&gt;java的安装：&lt;/h3&gt;&lt;h4 id=&quot;jre和jdk的区别：&quot;&gt;&lt;a href=&quot;#jre和jdk的区别：&quot; class=&quot;headerlink&quot; title=&quot;jre和jdk的区别：&quot;&gt;&lt;/a&gt;jre和jdk的区别：&lt;/h4&gt;&lt;p&gt;我深信很多人都有这个疑问，jre和jdk有毛线区别呢？&lt;br&gt;JRE:JAVA Runtime Environment&lt;br&gt;JDK:JAVA Development Kit&lt;br&gt;jre是java运行时环境，包含了java虚拟机（jvm），java基础类库(lib)。是使用java语言编写的程序运行所需要的软件环境，是提供给java程序用户使用的。&lt;br&gt;jdk是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。&lt;br&gt;JDK包含了JRE，同时还包含了编译java源码的编译器javac  &lt;/p&gt;
&lt;h4 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Step1:&lt;/strong&gt;将解压好的jdk1.7.0_21文件夹用最高权限复制到/usr/lib/jvm目录里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tar -zxvf jdk-8u25-linux-x64.tar.gz
sudo cp -r ~/jdk1.7.0_21/ /usr/lib/jvm/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step2:&lt;/strong&gt; 配置环境变量&lt;br&gt;    sudo gedit /etc/environment&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step3:&lt;/strong&gt; 加入环境变量:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PATH=&amp;quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/lib/jvm/jdk1.8.0_25/bin&amp;quot;  
CLASSPATH=&amp;quot;/usr/lib/jvm/jdk1.8.0_25/lib&amp;quot;  
JAVA_HOME=&amp;quot;/usr/lib/jvm/jdk1.8.0_25&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step4:&lt;/strong&gt;将环境变量的修改告诉Ubuntu系统&lt;br&gt;     sudo update-alternatives –install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_25/bin/java 300&lt;br&gt;     sudo update-alternatives –install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_25/bin/javac 300&lt;br&gt;     sudo update-alternatives –config java  &lt;/p&gt;
&lt;h3 id=&quot;java的配置：&quot;&gt;&lt;a href=&quot;#java的配置：&quot; class=&quot;headerlink&quot; title=&quot;java的配置：&quot;&gt;&lt;/a&gt;java的配置：&lt;/h3&gt;&lt;h4 id=&quot;java-ControlPanel怎样打开？&quot;&gt;&lt;a href=&quot;#java-ControlPanel怎样打开？&quot; class=&quot;headerlink&quot; title=&quot;java ControlPanel怎样打开？&quot;&gt;&lt;/a&gt;java ControlPanel怎样打开？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;/usr/lib/jvm/jdk1.8.0_25/bin/ControlPanel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用此命令可以进行java的安全性的配置等等。&lt;/p&gt;
&lt;h3 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://askubuntu.com/questions/464819/how-can-i-open-javas-control-panel&quot; title=&quot;java ControlPanel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu上打开java ControlPanel&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;近些时间搞机子的时候，总是因为windows下环境不对，导致无法正常的upgrade系统，所以借着在VMware实习，有免费专业的VMware Workstation Pro 供我使用，^_^, 嘿嘿，所以建了一个Ubuntu的虚拟机，准备在里面配置环境，以后再upgrade build就可以不用借别人的rdc啦~开森。  &lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>4.14-4.15计划</title>
    <link href="http://yoursite.com/2016/04/13/plan/4.14-4.15plan/"/>
    <id>http://yoursite.com/2016/04/13/plan/4.14-4.15plan/</id>
    <published>2016-04-13T11:59:59.000Z</published>
    <updated>2016-04-29T11:05:55.000Z</updated>
    
    <content type="html">&lt;p&gt;最近的任务:(两天内)&lt;br&gt;1.总结面试:java python linux—-可以玩回来再写&lt;br&gt;&lt;del&gt;2.工作日志po上来(dell driver的解决方案)&lt;/del&gt;&lt;br&gt;3.shell脚本里的sed命令详解(关于shell脚本的基础知识,u盘里有一个未完成的总结!!!)—-次优先&lt;br&gt;4.python中的dict详解—-次优先&lt;br&gt;&lt;del&gt;5.python中I/O操作(明天的新任务!!!)—-优先级最高&lt;/del&gt;&lt;br&gt;&lt;del&gt;6.打印准备电面的材料,游玩时带走—-4.17前必做&lt;/del&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近的任务:(两天内)&lt;br&gt;1.总结面试:java python linux—-可以玩回来再写&lt;br&gt;&lt;del&gt;2.工作日志po上来(dell driver的解决方案)&lt;/del&gt;&lt;br&gt;3.shell脚本里的sed命令详解(关于shell脚本的基础知识,u盘里有一个未完
    
    </summary>
    
      <category term="计划" scheme="http://yoursite.com/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="plan" scheme="http://yoursite.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:121--Best Time to Buy and Sell Stock</title>
    <link href="http://yoursite.com/2016/04/11/leetcode/best-time-to-buy-and-sell-stock/"/>
    <id>http://yoursite.com/2016/04/11/leetcode/best-time-to-buy-and-sell-stock/</id>
    <published>2016-04-11T11:59:59.000Z</published>
    <updated>2016-04-13T15:22:18.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：&lt;br&gt;最佳的买卖股票—设计一个算法找到买卖股票的最大利润，假设你只能买一只股票。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Solution：&quot;&gt;&lt;a href=&quot;#Solution：&quot; class=&quot;headerlink&quot; title=&quot;Solution：&quot;&gt;&lt;/a&gt;Solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;在输入的list中，找到最低和最高的股票价格，他们的差值即为最大利润。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def maxProfit(self, prices):
        max_profit, minPrice = 0, float(&amp;quot;inf&amp;quot;)
        for price in prices:
            minPrice = min(minPrice, price)
            max_profit = max(max_profit, price - minPrice)
        return max_profit

if __name__ == &amp;quot;__main__&amp;quot;:
    result = Solution().maxProfit([3,2,1,5,4,2,5,6])
    print(result)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：&lt;br&gt;最佳的买卖股票—设计一个算法找到买卖股票的最大利润，假设你只能买一只股票。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
  </entry>
  
  <entry>
    <title>摆渡人 作者:(英)克莱尔 麦克福尔</title>
    <link href="http://yoursite.com/2016/04/11/life/life-book-ferryman/"/>
    <id>http://yoursite.com/2016/04/11/life/life-book-ferryman/</id>
    <published>2016-04-11T11:59:59.000Z</published>
    <updated>2016-04-11T16:07:18.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;前言:最近水题看书看视频很累,趁着周末实在不想学习,也不想抱着手机,就看了这本小说.买这本小说的初衷,一是因为豆瓣评分比较高,二是因为其一句话的简述:If life were a lonely river, who would be the ferryman of your soul?如果命运是一条孤独的河流,谁会是你的灵魂摆渡人?三是因为买了一堆的技术书,纯粹来凑个单&lt;/blockquote&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;故事梗概&quot;&gt;&lt;a href=&quot;#故事梗概&quot; class=&quot;headerlink&quot; title=&quot;故事梗概:&quot;&gt;&lt;/a&gt;故事梗概:&lt;/h2&gt;&lt;p&gt;这个故事的主人公是迪伦和崔斯坦,从名字来判断,我觉得迪伦应该是个穿着格子衬衣,打扮的如同牛仔的西部女孩,小说里她是一个苏格兰女孩,自幼父母离异,从来没有见过父亲的她,决定不辞而别,离开她的母亲,踏上看望父亲的旅程,就是在旅程中,火车发生了事故,导致她的灵魂脱壳,遇见了她的灵魂摆渡人—崔斯坦,崔斯坦,听着这个名字,感觉起来就像是一个动漫里银发碧眼温柔的男孩纸,小说中崔斯坦有着钴蓝色的眼睛,金色的头发,精致的五官,完全是迪伦喜欢的样子,就这样他们相遇,并一起穿越迪伦内心所映射的荒原,中途中一次又一次并肩战胜恶魔,让他们两个人产生了不一样的情愫.当崔斯坦将迪伦送到荒原与家的分界线时,他们决定一起踏入”家”,我认为这里的家应该称为heaven,崔斯坦发现自己并不能跨进那条界线,而跨进了heaven的迪伦则误会崔斯坦对她的感情.迪伦为了找到崔斯坦问个明白,其实是因为她内心真的特别的爱崔斯坦,于是开始了她艰难的返回荒原的旅程,我认为全书最精彩的部分,莫过于迪伦勇敢的返回荒原,独自一个人战胜恶魔,找到崔斯坦的过程.在迪伦的鼓励下,崔斯坦决定试试能不能和迪伦一起回到人间,当他们因为爱而勇敢的面对现实和未来的时候,奇迹发生了,他们一起回到了人间世界,清楚的记得全书最后,两个人的对白:”原来你在这里””我在这里”&lt;/p&gt;
&lt;h2 id=&quot;我的评价&quot;&gt;&lt;a href=&quot;#我的评价&quot; class=&quot;headerlink&quot; title=&quot;我的评价:&quot;&gt;&lt;/a&gt;我的评价:&lt;/h2&gt;&lt;p&gt;I exist because you need me.这是崔斯坦对迪伦说的一句话,如果我真的存在,也是因为你需要我.治愈系满分的小说,尤其是在失恋后,挫折时,读完后简直会觉得少女心爆棚,人间有真情,人间有真爱啊!很佩服迪伦折回寻找崔斯坦的勇气,很佩服她能够冒着魂飞魄散的危险去做大胆的尝试.我觉得她身上的那种勇敢值得我去学习.如果说呆在一个安稳的heaven里面,只能是无尽的等待,得不到自己想要的东西,想爱的人,何不去冒险?去尝试,勇敢的迈开自己的脚步,也许会失败,但是至少内心不会后悔.&lt;br&gt;再说细节部分,我觉得作者的细节描写还是蛮好的,荒原的景象,人物的心理和形象都还算细致,栩栩如生.&lt;/p&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接:&quot;&gt;&lt;/a&gt;相关链接:&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26356948/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;豆瓣读书—摆渡人&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/33982768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎—摆渡人是否过誉?&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/28019019&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎—你对摆渡人的理解?&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;前言:最近水题看书看视频很累,趁着周末实在不想学习,也不想抱着手机,就看了这本小说.买这本小说的初衷,一是因为豆瓣评分比较高,二是因为其一句话的简述:If life were a lonely river, who would be the ferryman of your soul?如果命运是一条孤独的河流,谁会是你的灵魂摆渡人?三是因为买了一堆的技术书,纯粹来凑个单&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
      <category term="foreign literature" scheme="http://yoursite.com/categories/life/foreign-literature/"/>
    
      <category term="治愈系" scheme="http://yoursite.com/categories/life/foreign-literature/%E6%B2%BB%E6%84%88%E7%B3%BB/"/>
    
    
      <category term="read" scheme="http://yoursite.com/tags/read/"/>
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
      <category term="foreign fiction" scheme="http://yoursite.com/tags/foreign-fiction/"/>
    
      <category term="治愈系" scheme="http://yoursite.com/tags/%E6%B2%BB%E6%84%88%E7%B3%BB/"/>
    
      <category term="少女心" scheme="http://yoursite.com/tags/%E5%B0%91%E5%A5%B3%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:字符串同构</title>
    <link href="http://yoursite.com/2016/04/11/leetcode/isomorphic-strings/"/>
    <id>http://yoursite.com/2016/04/11/leetcode/isomorphic-strings/</id>
    <published>2016-04-11T11:59:59.000Z</published>
    <updated>2016-04-13T15:24:29.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：判断两个字符串是否同构，比如food和look是同构，like和love同构，find和food不是同构&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Solution：&quot;&gt;&lt;a href=&quot;#Solution：&quot; class=&quot;headerlink&quot; title=&quot;Solution：&quot;&gt;&lt;/a&gt;Solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;想到用map解决这个问题，因为map是key-value的映射。d[key]=value 将s放到lookup中key的位置，t放在lookup中的value的位置，当s[i]没有在lookup中出现过时，就将s[i]-t[i]这个映射关系加入到lookup中。如果说s[i]已经在lookup中，比如说food，第三个字符o已经出现在lookup中了，这时候判断已经在lookup中的s[i]作为key值对应的value值是否等于当前t[i]相同，如果相同，说明t中此时也正好有两个连续相同的字符，说明他们同构，否则return false，说明他们并不同构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*-coding:utf-8 -*-
#算法思想：用map解决，将s和t的每个字符成映射的关系
class Solution:
    def isIsomorphic(self, s, t):
        if len(s) != len(t):
            return False

        return self.halfIsom(s, t) and self.halfIsom(t, s)


    def halfIsom(self, s, t):
        lookup = {}
        for i in range(len(s)):
            #这里的思想是如果s[i]没有在lookup里面，也就是没有重复元素的话，将s[i]-t[i]映射添加
            #如果有重复的元素，就看在lookup中s[i]作为key对应的value是否和当前的t[i]相同，若不同，则说明不同构
            if s[i] not in lookup:
                #建立映射关系s和t
                lookup[s[i]] = t[i]
            elif lookup[s[i]] != t[i]:
                return False
        print(lookup)
        return True

if __name__ == &amp;quot;__main__&amp;quot;:
    s = &amp;quot;foot&amp;quot;
    t = &amp;quot;look&amp;quot;
    print(Solution().isIsomorphic(s, t))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;对于dict的理解更加深入了，纠正一下前面一篇的错误，对于dict，d[key] = value,下一篇仔细的写下dict函数吧，还是挺有用的。&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：判断两个字符串是否同构，比如food和look是同构，like和love同构，find和food不是同构&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:19--Remove Nth Node From End of List</title>
    <link href="http://yoursite.com/2016/04/07/leetcode/remove-nth-node-from-end-of-list/"/>
    <id>http://yoursite.com/2016/04/07/leetcode/remove-nth-node-from-end-of-list/</id>
    <published>2016-04-07T11:59:59.000Z</published>
    <updated>2016-04-13T15:21:14.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：n是链表从后向前数第n个结点，删除该结点&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;我的想法是先求出链表的长度，然后求出从前向后遍历链表时倒数第n个结点的position。&lt;br&gt;需要注意的是，边界值的判断：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n=0时，return head &lt;/li&gt;
&lt;li&gt;head为空时，return None&lt;/li&gt;
&lt;li&gt;position&amp;lt;0时，此时说明要删除的元素为头元素，则return head.next.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ListNode(object):
    def __init__(self, x):
         self.val = x
         self.next = None
    def __repr__(self):
        if self is None:
            return &amp;quot;Nil&amp;quot;
        else:
            return &amp;quot;{} -&amp;gt; {}&amp;quot;.format(self.val, repr(self.next))

class Solution(object):
    def removeNthFromEnd(self, head, n):
        if n == 0:
            return head
        if head == None:
            return None
        len = 0
        temp1 = head
        while(temp1):
            len += 1
            temp1 = temp1.next
        position = len - n - 1
        print(position)

        if position &amp;lt; 0:
            return head.next

        temp2 = head
        while position &amp;gt; 0:
            temp2 = temp2.next
            position -= 1
        if temp2.next.next != None:
            temp2.next = temp2.next.next
        else :
            temp2.next = None
        return head

if __name__ == &amp;quot;__main__&amp;quot;:
    head = ListNode(1)
    head.next = ListNode(2)
    #head.next, head.next.next, head.next.next.next,head.next.next.next.next = ListNode(2),ListNode(3),ListNode(4),ListNode(5)
    n = 2
    newhead = Solution().removeNthFromEnd(head, n)
    while(head):
        print(head.val)
        head = head.next
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;No&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：n是链表从后向前数第n个结点，删除该结点&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:223--Rectangle Area</title>
    <link href="http://yoursite.com/2016/04/06/leetcode/rectangle-area/"/>
    <id>http://yoursite.com/2016/04/06/leetcode/rectangle-area/</id>
    <published>2016-04-06T11:59:59.000Z</published>
    <updated>2016-04-11T16:02:13.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：&lt;br&gt;查找两个直线矩形的二维平面覆盖的总面积。 如该图所示的每个矩形由其左下角和右上角限定。&lt;br&gt;&lt;img src=&quot;http://7xskaf.com1.z0.glb.clouddn.com/rectangle_area.png&quot; alt=&quot;retangle_area&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;(A,B)第一个矩形的左下角，(C,D)第一个矩形的右上角&lt;br&gt;(E,F)第二个矩形的左下角，(G,H)第二个矩形的右上角&lt;br&gt;查找两个直线矩形的二维平面覆盖的总面积。 如该图所示的每个矩形由其左下角和右上角限定。&lt;br&gt;            &lt;strong&gt;覆盖面积=总面积 - 重叠面积&lt;/strong&gt;&lt;br&gt;1）当两个矩形没有重叠的时候，覆盖面积就是两个矩形面积和&lt;br&gt;2）当有重叠的时候，要找到重叠部分的左下角和右上角，根据坐标计算出面积&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def computeArea(self, A, B, C, D, E, F, G, H):
        #(A,B)第一个矩形的左下角，(C,D)第一个矩形的右上角
        #(E,F)第二个矩形的左下角，(G,H)第二个矩形的右上角
        #查找两个直线矩形的二维平面覆盖的总面积。 如该图所示的每个矩形由其左下角和右上角限定。
        #覆盖面积=总面积 - 重叠面积
        #1）当两个矩形没有重叠的时候，覆盖面积就是两个矩形面积和
        #2）当有重叠的时候，要找到重叠部分的左下角和右上角，根据坐标计算出面积
        area = (D - B)*(C - A) + (H -F)*(G - E)
        #两个矩形不相交的情况
        if B &amp;gt;= H or E &amp;gt;= C or A &amp;gt;= G or F &amp;gt;= D:
            return area  
        #相交的情况下,求相交矩形的左下角和右上角
        leftbottomx = max(A, E)
        leftbottomy = max(B, F)
        righttopx = min(C, G)
        righttopy = min(D, H)

        return area - (righttopx - leftbottomx)*(righttopy - leftbottomy)

if __name__ ==&amp;quot;__main__&amp;quot;:
    print(Solution().computeArea(-3, 0, 3, 4, 0, -1, 9, 2))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;NO&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;NO&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：&lt;br&gt;查找两个直线矩形的二维平面覆盖的总面积。 如该图所示的每个矩形由其左下角和右上角限定。&lt;br&gt;&lt;img src=&quot;http://7xskaf.com1.z0.glb.clouddn.com/rectangle_area.png&quot; alt=&quot;retangle_area&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
      <category term="智力题" scheme="http://yoursite.com/categories/Python/leetcode/jobs/%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="智力题" scheme="http://yoursite.com/tags/%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:88--Merge Sorted Array</title>
    <link href="http://yoursite.com/2016/04/06/leetcode/merge-sorted-array/"/>
    <id>http://yoursite.com/2016/04/06/leetcode/merge-sorted-array/</id>
    <published>2016-04-06T11:59:59.000Z</published>
    <updated>2016-04-11T16:02:01.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：合并排序数组&lt;br&gt;给定两个排过序的数组nums1和nums2，将两个数组合并为一个整体排序的数组。&lt;br&gt;nums1 = [1,3,5,0,0,0,0]&lt;br&gt;nums2 = [2,4,6,8]&lt;br&gt;合并后为：[1,2,3,4,5,6,7,8]  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;&lt;br&gt;由于nums1和nums2都是排过序的，所以从后向前比较，将较大的一个放在最后的位置。 &lt;/p&gt;
&lt;p&gt;  空间复杂度o(1),时间复杂度o(m+n)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def merge(self, nums1, m, nums2, n):
        #last位于list最后一个位置, i是nums1的最后一个位置,j是nums2的最后一个位置
        last = m + n - 1
        i = m - 1
        j = n - 1
        while i &amp;gt;= 0 and j &amp;gt;= 0:
            if nums1[i] &amp;gt; nums2[j]:
                #大的数放在最后的位置
                nums1[last] = nums1[i]
                #此时i向前移动一位,与j所在位置的数字比较
                i -= 1
                last -= 1
            else:
                nums1[last] = nums2[j]
                j -= 1
                last -= 1

        #此处还要加上对while j &amp;gt;= 0的判断,而不需要加上对while i &amp;gt;= 0的判断,因为,i本         
        #身就在nums1里面,j在nums2里面,要对nums2的数判断完加入nums1
        while j &amp;gt;= 0:
            nums1[last] = nums2[j]
            j -= 1
            last -= 1

if __name__ == &amp;quot;__main__&amp;quot;:
    nums1 = [1,3,5,7,9,0,0,0,0]
    nums2 = [2,4,6,8]
    Solution().merge(nums1, 5, nums2, 4)
    print nums1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;开始的时候比较疑惑,为什么要加一个while j &amp;gt;= 0的判断?&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;不需要加上对while i &amp;gt;= 0的判断,因为,i本身就在nums1里面,j在nums2里面,要对nums2的数判断完加入nums1&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：合并排序数组&lt;br&gt;给定两个排过序的数组nums1和nums2，将两个数组合并为一个整体排序的数组。&lt;br&gt;nums1 = [1,3,5,0,0,0,0]&lt;br&gt;nums2 = [2,4,6,8]&lt;br&gt;合并后为：[1,2,3,4,5,6,7,8]  &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
      <category term="array" scheme="http://yoursite.com/categories/Python/leetcode/jobs/array/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:160--Intersection of Two Linked Lists</title>
    <link href="http://yoursite.com/2016/04/05/leetcode/intersection-of-two-linked-lists/"/>
    <id>http://yoursite.com/2016/04/05/leetcode/intersection-of-two-linked-lists/</id>
    <published>2016-04-05T11:59:59.000Z</published>
    <updated>2016-04-11T16:01:51.000Z</updated>
    
    <content type="html">&lt;p&gt;题目描述：编程求两个单链表的交点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果链表没有交点，返回null&lt;/li&gt;
&lt;li&gt;链表在函数返回时必须保留原始数据结构&lt;/li&gt;
&lt;li&gt;可以假设链表中没有环&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码最好时间复杂度为O(N),空间复杂度O(1)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;solution：&quot;&gt;&lt;a href=&quot;#solution：&quot; class=&quot;headerlink&quot; title=&quot;solution：&quot;&gt;&lt;/a&gt;solution：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想：&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;得到两个链表的长度  &lt;/li&gt;
&lt;li&gt;将长链表向前移动差值  &lt;/li&gt;
&lt;li&gt;&lt;p&gt;两个指针一起前进，遇到相同的即是交点，如果没有找到，返回null  &lt;/p&gt;
&lt;p&gt;空间复杂度o(1),时间复杂度o(m+n)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Python Code:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#1. 得到两个链表的长度
#2. 将长链表向前移动差值
#3. 两个指针一起前进，遇到相同的即是交点，如果没有找到，返回null  
#空间复杂度o(1),时间复杂度o(m+n) 
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None
class Solution(object):
    def getIntersectionNode(self, headA, headB):


        #求出A的长度
        lenA = Solution().getLength(headA)
        #print(&amp;apos;A length % s&amp;apos; % lenA)
        #求出B的长度
        lenB = Solution().getLength(headB)
        #print(&amp;apos;B length % s&amp;apos; % lenB)
        #B是长链表,B的头指针向前移动
        if lenB &amp;gt; lenA:
            while lenB &amp;gt; lenA:
                lenB -= 1
                headB = headB.next
                #print(&amp;quot;hereBbig&amp;quot;)
            #print(headB.val)
        #A是长链表，A的头指针向前移动
        else:    
            while lenA &amp;gt; lenB:
                lenA -= 1
                headA = headA.next
                #print(&amp;quot;hereAbig&amp;quot;)
            #print(headA.val)

        #print(&amp;apos;此时a的head值 %s&amp;apos; % headA.val)
        #print(&amp;apos;此时b的head值%s &amp;apos; % headB.val)
        #A与B齐头并进，直到链表中不再有元素
        while headA:
            if headA == headB:
                return headA
            headA = headA.next
            headB = headB.next

        #如果没有相同的话，返回null
        return None


    #获得链表长度的函数
    def getLength(self, node):
        #初始化len
        len = 0
        while node:
            len += 1
            node = node.next
        return len
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;My-Problem&quot;&gt;&lt;a href=&quot;#My-Problem&quot; class=&quot;headerlink&quot; title=&quot;My Problem:&quot;&gt;&lt;/a&gt;My Problem:&lt;/h3&gt;&lt;p&gt;为什么一定要if else语句才能ac呢？？？？直接while不可以吗？？？&lt;br&gt;路过的大神们，求留言解答疑惑！！！&lt;/p&gt;
&lt;h3 id=&quot;My-Answer&quot;&gt;&lt;a href=&quot;#My-Answer&quot; class=&quot;headerlink&quot; title=&quot;My Answer&quot;&gt;&lt;/a&gt;My Answer&lt;/h3&gt;&lt;p&gt;妈的。。。事实证明是oj抽风了。。。if else,可以去掉~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：编程求两个单链表的交点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果链表没有交点，返回null&lt;/li&gt;
&lt;li&gt;链表在函数返回时必须保留原始数据结构&lt;/li&gt;
&lt;li&gt;可以假设链表中没有环&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码最好时间复杂度为O(N),空间复杂度O(1)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/Python/leetcode/"/>
    
      <category term="jobs" scheme="http://yoursite.com/categories/Python/leetcode/jobs/"/>
    
      <category term="linklist" scheme="http://yoursite.com/categories/Python/leetcode/jobs/linklist/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="jobs" scheme="http://yoursite.com/tags/jobs/"/>
    
      <category term="linklist" scheme="http://yoursite.com/tags/linklist/"/>
    
  </entry>
  
</feed>
